###############################################################################
# almost everything is an object, arguments, keywords aren't
###############################################################################

1 + 2 => 1.+(2)

"ybur".reverse.capitalize => "Ruby"

"Hello" * 3 => "HelloHelloHello"

"Hello"[0..1] => "He"

###############################################################################
# methods
###############################################################################

def name
 "Ruby"
end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# if the method ends in true or false end method name with question mark
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def valid_drinking_age?(age)
  age >= 21
end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# if the method modifies the object it should end in a bang
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

a = ["rupert", "kaylee", "gabby"]

class Array
  def upcase
    self.collect{|a| a.upcase}
  end

  def upcase!
    self.each {|a| a.upcase!}
  end
end

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Monkeypatching is the modification of methods on a previously defined
# class. Monkeypatching core/standard library functionality should not be done
# for any open source code. Instead create your own subclass.
#
# In other words, don't do the following
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

[1,2,3].to_s => "[1,2,3]"

class Array
  def to_s
    self.inject(""){|res, ele| res += ele.to_s}
  end
end

[1,2,3].to_s => "123"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# notice original is not modified
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

a.upcase => ["RUPERT", "KAYLEE", "GABBY"]
a => ["rupert", "kaylee", "gabby"]

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# original has been modified
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

a.upcase! => ["RUPERT", "KAYLEE", "GABBY"]
a => ["RUPERT", "KAYLEE", "GABBY"]

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Ruby doc http://ruby-doc.org
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

###############################################################################
# returning
###############################################################################

def give_me_a_one
  return 1
end

a = give_me_a_one

def give_me_a_one_and_a_two
  return 1,2
end

a,b = give_me_a_one_and_a_two

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# last evaluation is returned
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def give_me_a_one_and_a_two
  [1,2]
end

a,b = give_me_a_one_and_a_two

###############################################################################
# variables
###############################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# instance
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@name = "Ruby"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# class
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

@@name = "Ruby"

class A
  @@name = "Ruby"
  def self.what_is_my_name
   @@name
  end

  def what_is_my_name
    @@name
  end
end

A.what_is_my_name

a = A.new
a.what_is_my_name

class B < A
  @@name = "Perl"
end

b = B.new
b.what_is_my_name

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Note how A is now called Perl
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A.what_is_my_name
a.what_is_my_name

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# class instance variables
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class A
  class << self
    attr_accessor :name
  end
  @name = "Ruby"
end

###############################################################################
# Constants
###############################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Constants begin with capital letter, get warning when resetting
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Dog = "Rupert"

###############################################################################
# data structures
###############################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# arrays
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[1,2,3]

[1,2,3] << 4 => [1,2,3,4]

[2,3,4].unshift(1) => [1,2,3,4]

[1,2,3].pop => 3

[1,2,3] << [4,5] => [1,2,3,[4,5]]

[1,2,3].push([4,5]) => [1,2,3,[4,5]]

[1,2,3,[4,5]].flatten => [1,2,3,4,5]

[1,2,3] + [4,5] => [1,2,3,4,5]

[1,2,3].collect{|x| x ** 2} => [1,4,9]

[1,2,3,3].uniq => [1,2,3]

[5,3,4,1,2].sort => [1,2,3,4,5]

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# hash
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

hash = {a: 1, b: 2, c: 3}

# Inconsistency: clear is not a bang method but alters the object
hash.clear => {}

hash[:a] => 1

hash[:x] => nil

hash.default = 0

# Even though it's not defined it returns 0
hash[:z] => 0

# Inconsistency: delete is not a bang method but alters the object
hash.delete(:a) => 1 # hash is now {:b => 2, :c => 3}

hash.each {|key,value| puts "Key is #{key}, Value is #{value}" }

hash.empty? => false

hash.invert => {1=>:a, 2=>:b, 3=>:c}

hash.merge({a: 10, d: 4}) => {:a=>10, :b=>2, :c=>3, :d=>4}
hash.merge!({a: 10, d: 4}) => {:a=>10, :b=>2, :c=>3, :d=>4}

hash.reject{|key,value| value > 2} => {:a=>1, :b=>2}
hash.reject!{|key,value| value > 2} => {:a=>1, :b=>2}

hash.keys => [:a, :b, :c]
hash.values => [:a, :b, :c]

###############################################################################
# control flow
###############################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# if
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if <something is true>
  do_something
else
  do_something_else
end

    if height < 4
      puts "Must be at least 4 foot tall to ride."
    else
      puts "Enjoy the ride"
    end

if <something is true>
  do_something
elsif <something else is true>
  do_that_other_thing
else
  do_something_else
end

    if height < 4
      puts "Must be at least 4 feet tall to ride."
    elsif height >= 7
      puts "Must be under 7 feet tall to ride."
    else
      puts "Enjoy the ride"
    end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# if at the end
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def execute(statement)
  # There is no statement, so return nil
  return if statement.nil?

  # some good code goes here
end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# unless
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

unless <something is false>
  do_something
else
  do_something_else
end

    unless height > 4
      puts "Must be at least 4 feet tall to ride."
    else
      puts "Enjoy the ride"
    end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# unless at the end
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def execute(statement)
  # There is no statement, so return nil
  return unless statement

  # some good code goes here
end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# while
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
while < something that evaluates to true > do
  # code
end

    while i < 10 do
      puts "i is now #{i}"
      i += 1
    end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# until
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
until < something that evalutes to true > do
  # code
end

    found = false
    until found do
      if page_contains?('Secret')
        found = true
      else
        crawl_next_page
      end
    end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# for
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

for i in 1..10 do
  puts i
end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# break
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

for i in 1..10 do
  if i > 5
    break
  end
  puts i
end
=> 1
2
3
4
5

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# next
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

for i in 1..10 do
  if i < 5
    next
  end
  puts i
end

=> 5
6
7
8
9
10


###############################################################################
# proc and lambda
###############################################################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# proc
#
# 1.9 + syntax
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
my_proc = Proc.new {|p1, p2| puts "I was passed #{p1} and #{p2}" }
my_proc = -> p1, p2 { puts "I was passed #{p1} and #{p2}" }

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# proc returns from method
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def proc_test
  Proc.new { return "returning from proc" }.call
  return "returning from proc_test method"
end

def lambda_test
  lambda { return "returning from lambda" }.call
  return "returning from lambda_test method"
end

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# lambda
#
# lamda validates number of arguments passed
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
my_lambda = lambda {|p1, p2| puts "I was passed #{p1} and #{p2}" }

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ArgumentError: wrong number of arguments (0 for 2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
my_lambda.call

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# multiple ways to call
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

my_proc = -> p1 { p1 > 100 }

my_proc.call(200)
my_proc[200]
my_proc.(200)
my_proc === 200
